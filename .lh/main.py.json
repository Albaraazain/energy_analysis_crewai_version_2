{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731140747290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731141139249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import os\r\n import asyncio\r\n from typing import Dict, Any\r\n from datetime import datetime, timedelta\r\n+\r\n+import numpy as np\r\n import pandas as pd\r\n from dotenv import load_dotenv\r\n from langchain_groq import ChatGroq\r\n from crewai import Agent, Task, Crew, Process\r\n"
                }
            ],
            "date": 1731140747290,
            "name": "Commit-0",
            "content": "import os\r\nimport asyncio\r\nfrom typing import Dict, Any\r\nfrom datetime import datetime, timedelta\r\nimport pandas as pd\r\nfrom dotenv import load_dotenv\r\nfrom langchain_groq import ChatGroq\r\nfrom crewai import Agent, Task, Crew, Process\r\n\r\nfrom src.agents.data_analyst import DataAnalystAgent\r\nfrom src.agents.cost_analyst import CostAnalystAgent\r\nfrom src.agents.pattern_recognition import PatternRecognitionAgent\r\nfrom src.agents.energy_advisor import EnergyAdvisorAgent\r\nfrom src.core.types import EnergyData\r\n\r\n# Load environment variables\r\nload_dotenv()\r\n\r\n# Configure Groq\r\nGROQ_API_KEY = os.getenv(\"GROQ_API_KEY\")\r\nif not GROQ_API_KEY:\r\n    raise ValueError(\"GROQ_API_KEY not found in environment variables\")\r\n\r\ndef create_llm():\r\n    \"\"\"Create Groq LLM instance with Llama 3 70B model\"\"\"\r\n    return ChatGroq(\r\n        groq_api_key=GROQ_API_KEY,\r\n        model_name=\"llama3-groq-70b-8192-tool-use-preview\",\r\n        temperature=0.7,\r\n        max_tokens=8192\r\n    )\r\n\r\ndef load_sample_data(days: int = 30) -> Dict[str, Any]:\r\n    \"\"\"Generate sample energy consumption data\"\"\"\r\n    dates = pd.date_range(\r\n        start=datetime.now() - timedelta(days=days),\r\n        end=datetime.now(),\r\n        freq='H'\r\n    )\r\n    \r\n    # Generate synthetic data\r\n    data = []\r\n    for date in dates:\r\n        # Simulate daily and seasonal patterns\r\n        hour = date.hour\r\n        day_factor = 1 + 0.5 * np.sin(2 * np.pi * hour / 24)  # Daily pattern\r\n        season_factor = 1 + 0.3 * np.sin(2 * np.pi * date.dayofyear / 365)  # Seasonal pattern\r\n        \r\n        # Base consumption with some randomness\r\n        consumption = 30 * day_factor * season_factor * (0.9 + 0.2 * np.random.random())\r\n        \r\n        # Simulate temperature based on time of day and season\r\n        base_temp = 68 + 15 * np.sin(2 * np.pi * date.dayofyear / 365)\r\n        temp_variation = 10 * np.sin(2 * np.pi * hour / 24)\r\n        temperature = base_temp + temp_variation\r\n        \r\n        data.append({\r\n            \"timestamp\": date.isoformat(),\r\n            \"consumption\": round(consumption, 2),\r\n            \"rate\": 0.12 + 0.04 * (hour >= 14 and hour <= 19),  # Peak rate during 2-7 PM\r\n            \"temperature\": round(temperature, 1)\r\n        })\r\n    \r\n    return {\"data\": data}\r\n\r\nasync def main():\r\n    \"\"\"Main execution function\"\"\"\r\n    # Initialize LLM\r\n    llm = create_llm()\r\n    \r\n    # Configuration for agents\r\n    config = {\r\n        \"verbose\": True,\r\n        \"tools_enabled\": True\r\n    }\r\n    \r\n    # Create agents\r\n    data_analyst = DataAnalystAgent(llm=llm, config=config)\r\n    cost_analyst = CostAnalystAgent(llm=llm, config=config)\r\n    pattern_recognition = PatternRecognitionAgent(llm=llm, config=config)\r\n    energy_advisor = EnergyAdvisorAgent.create_agent(llm=llm)\r\n    \r\n    # Load sample data\r\n    data = load_sample_data(days=30)\r\n    \r\n    try:\r\n        # Process data through different agents\r\n        print(\"🔍 Starting Data Analysis...\")\r\n        data_analysis = await data_analyst.process(data)\r\n        print(\"✅ Data Analysis Complete\\n\")\r\n        \r\n        print(\"💰 Starting Cost Analysis...\")\r\n        cost_analysis = await cost_analyst.process(data)\r\n        print(\"✅ Cost Analysis Complete\\n\")\r\n        \r\n        print(\"🎯 Identifying Patterns...\")\r\n        pattern_analysis = await pattern_recognition.process(data)\r\n        print(\"✅ Pattern Recognition Complete\\n\")\r\n        \r\n        # Create tasks for the crew\r\n        tasks = [\r\n            Task(\r\n                description=\"Analyze energy consumption patterns and identify anomalies\",\r\n                agent=data_analyst.agent\r\n            ),\r\n            Task(\r\n                description=\"Analyze cost implications and identify savings opportunities\",\r\n                agent=cost_analyst.agent\r\n            ),\r\n            Task(\r\n                description=\"Generate comprehensive energy optimization recommendations\",\r\n                agent=energy_advisor\r\n            )\r\n        ]\r\n        \r\n        # Create and run the crew\r\n        crew = Crew(\r\n            agents=[data_analyst.agent, cost_analyst.agent, energy_advisor],\r\n            tasks=tasks,\r\n            process=Process.sequential\r\n        )\r\n        \r\n        print(\"🤖 Starting Crew Analysis...\")\r\n        result = await crew.kickoff()\r\n        \r\n        # Print results\r\n        print(\"\\n📊 Analysis Results:\")\r\n        print(\"-------------------\")\r\n        print(\"\\n1. Data Analysis Insights:\")\r\n        for insight in data_analysis.data.get('insights', []):\r\n            print(f\"- {insight.get('description')}\")\r\n        \r\n        print(\"\\n2. Cost Analysis Findings:\")\r\n        cost_data = cost_analysis.data.get('analysis', {})\r\n        for category, findings in cost_data.items():\r\n            print(f\"\\n{category.replace('_', ' ').title()}:\")\r\n            if isinstance(findings, dict):\r\n                for key, value in findings.items():\r\n                    print(f\"- {key}: {value}\")\r\n        \r\n        print(\"\\n3. Pattern Recognition Results:\")\r\n        patterns = pattern_analysis.data.get('significant_patterns', [])\r\n        for pattern in patterns:\r\n            print(f\"- {pattern}\")\r\n        \r\n        print(\"\\n4. Crew Analysis Results:\")\r\n        print(result)\r\n        \r\n    except Exception as e:\r\n        print(f\"\\n❌ Error during analysis: {str(e)}\")\r\n        raise\r\n\r\nif __name__ == \"__main__\":\r\n    # Run the async main function\r\n    asyncio.run(main())"
        }
    ]
}