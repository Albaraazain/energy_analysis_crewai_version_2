{
    "sourceFile": "src/core/analyzer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731053454284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731053454284,
            "name": "Commit-0",
            "content": "# src/core/analyzer.py\r\n\r\nfrom crewai import Crew, Process, LLM\r\nfrom typing import Dict, Any\r\nimport logging\r\nfrom datetime import datetime\r\n\r\nfrom config.config import LLM_CONFIG, PROCESS_CONFIG\r\nfrom src.agents.data_analyst import DataAnalystAgent\r\nfrom src.agents.energy_advisor import EnergyAdvisorAgent\r\nfrom src.core.tasks import TaskDefinitions\r\n\r\n\r\nimport json\r\n\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass EnergyAnalyzer:\r\n    \"\"\"\r\n    Core class for energy consumption analysis using CrewAI.\r\n    Version 1: Implementation with two agents and sequential processing.\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        \"\"\"Initialize the EnergyAnalyzer with default configuration.\"\"\"\r\n        try:\r\n            self.llm = LLM(\r\n                model=LLM_CONFIG[\"model\"],\r\n                base_url=LLM_CONFIG[\"base_url\"],\r\n                api_key=LLM_CONFIG[\"api_key\"],\r\n                temperature=LLM_CONFIG[\"temperature\"]\r\n            )\r\n            logger.info(\"LLM initialized successfully\")\r\n\r\n            # Initialize agents\r\n            self.data_analyst = DataAnalystAgent.create_agent(self.llm)\r\n            self.energy_advisor = EnergyAdvisorAgent.create_agent(self.llm)\r\n            logger.info(\"Agents initialized successfully\")\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Initialization error: {str(e)}\")\r\n            raise\r\n\r\n    def analyze(self, monthly_data: Dict[str, float]) -> Dict[str, Any]:\r\n        \"\"\"\r\n        Analyze energy consumption data and provide recommendations.\r\n\r\n        Args:\r\n            monthly_data: Dictionary of monthly consumption data\r\n                        Format: {'YYYY-MM': consumption_value}\r\n\r\n        Returns:\r\n            Dictionary containing analysis results and recommendations\r\n        \"\"\"\r\n        try:\r\n            # Validate input data\r\n            if not self._validate_data(monthly_data):\r\n                raise ValueError(\"Invalid data format\")\r\n\r\n            # Create tasks\r\n            analysis_task = TaskDefinitions.create_analysis_task(\r\n                monthly_data,\r\n                self.data_analyst\r\n            )\r\n\r\n            # Create crew for initial analysis\r\n            analysis_crew = Crew(\r\n                agents=[self.data_analyst],\r\n                tasks=[analysis_task],\r\n                verbose=PROCESS_CONFIG[\"verbose\"],\r\n                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n                process=Process.sequential\r\n            )\r\n\r\n            # Execute analysis\r\n            logger.info(\"Starting energy consumption analysis\")\r\n            analysis_result = analysis_crew.kickoff()\r\n\r\n            # Parse analysis result\r\n            try:\r\n                analysis_data = json.loads(analysis_result.raw)\r\n            except json.JSONDecodeError:\r\n                logger.warning(\"Failed to parse analysis result as JSON\")\r\n                analysis_data = {\"raw_analysis\": analysis_result.raw}\r\n\r\n            # Create recommendation task\r\n            recommendation_task = TaskDefinitions.create_recommendation_task(\r\n                analysis_data,\r\n                self.energy_advisor\r\n            )\r\n\r\n            # Create crew for recommendations\r\n            recommendation_crew = Crew(\r\n                agents=[self.energy_advisor],\r\n                tasks=[recommendation_task],\r\n                verbose=PROCESS_CONFIG[\"verbose\"],\r\n                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n                process=Process.sequential\r\n            )\r\n\r\n            # Generate recommendations\r\n            logger.info(\"Generating recommendations\")\r\n            recommendation_result = recommendation_crew.kickoff()\r\n\r\n            # Parse recommendation result\r\n            try:\r\n                recommendation_data = json.loads(recommendation_result.raw)\r\n            except json.JSONDecodeError:\r\n                logger.warning(\"Failed to parse recommendations as JSON\")\r\n                recommendation_data = {\"raw_recommendations\": recommendation_result.raw}\r\n\r\n            # Combine results\r\n            return {\r\n                \"analysis\": analysis_data,\r\n                \"recommendations\": recommendation_data,\r\n                \"timestamp\": datetime.now().isoformat()\r\n            }\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Analysis error: {str(e)}\")\r\n            raise\r\n\r\n    def _validate_data(self, data: Dict[str, float]) -> bool:\r\n        \"\"\"Validate input data format.\"\"\"\r\n        if not data or not isinstance(data, dict):\r\n            return False\r\n\r\n        try:\r\n            for month, value in data.items():\r\n                # Validate date format (YYYY-MM)\r\n                if not (isinstance(month, str) and len(month.split('-')) == 2):\r\n                    return False\r\n                # Validate consumption value\r\n                if not (isinstance(value, (int, float)) and value >= 0):\r\n                    return False\r\n            return True\r\n        except Exception:\r\n            return False"
        }
    ]
}