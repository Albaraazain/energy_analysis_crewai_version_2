{
    "sourceFile": "src/core/analyzer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731053454284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731088376253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,98 @@\n # src/core/analyzer.py\r\n+from typing import Dict, Any, Optional\r\n+from .memory.manager import MemoryManager\r\n+from .types import AnalysisResult\r\n \r\n-from crewai import Crew, Process, LLM\r\n-from typing import Dict, Any\r\n-import logging\r\n-from datetime import datetime\r\n+class EnhancedEnergyAnalyzer:\r\n+    \"\"\"Enhanced analyzer with memory integration\"\"\"\r\n \r\n-from config.config import LLM_CONFIG, PROCESS_CONFIG\r\n-from src.agents.data_analyst import DataAnalystAgent\r\n-from src.agents.energy_advisor import EnergyAdvisorAgent\r\n-from src.core.tasks import TaskDefinitions\r\n+    def __init__(self, config: Dict[str, Any]):\r\n+        self.config = config\r\n+        self.memory_manager = MemoryManager(config)\r\n+        self.process = self._initialize_process()\r\n+        self.initialized = False\r\n \r\n+    async def analyze(self, data: Dict[str, float]) -> AnalysisResult:\r\n+        \"\"\"Perform analysis with memory context\"\"\"\r\n+        try:\r\n+            # Get relevant historical context\r\n+            context = await self._get_analysis_context(data)\r\n \r\n-import json\r\n+            # Perform analysis with context\r\n+            analysis_result = await self.process.execute({\r\n+                'data': data,\r\n+                'context': context\r\n+            })\r\n \r\n+            # Store analysis results in memory\r\n+            await self._store_analysis_results(analysis_result)\r\n \r\n-logging.basicConfig(level=logging.INFO)\r\n-logger = logging.getLogger(__name__)\r\n-\r\n-class EnergyAnalyzer:\r\n-    \"\"\"\r\n-    Core class for energy consumption analysis using CrewAI.\r\n-    Version 1: Implementation with two agents and sequential processing.\r\n-    \"\"\"\r\n-\r\n-    def __init__(self):\r\n-        \"\"\"Initialize the EnergyAnalyzer with default configuration.\"\"\"\r\n-        try:\r\n-            self.llm = LLM(\r\n-                model=LLM_CONFIG[\"model\"],\r\n-                base_url=LLM_CONFIG[\"base_url\"],\r\n-                api_key=LLM_CONFIG[\"api_key\"],\r\n-                temperature=LLM_CONFIG[\"temperature\"]\r\n-            )\r\n-            logger.info(\"LLM initialized successfully\")\r\n-\r\n-            # Initialize agents\r\n-            self.data_analyst = DataAnalystAgent.create_agent(self.llm)\r\n-            self.energy_advisor = EnergyAdvisorAgent.create_agent(self.llm)\r\n-            logger.info(\"Agents initialized successfully\")\r\n-\r\n+            return analysis_result\r\n         except Exception as e:\r\n-            logger.error(f\"Initialization error: {str(e)}\")\r\n+            print(f\"Error in analysis: {str(e)}\")\r\n             raise\r\n \r\n-    def analyze(self, monthly_data: Dict[str, float]) -> Dict[str, Any]:\r\n-        \"\"\"\r\n-        Analyze energy consumption data and provide recommendations.\r\n+    async def _get_analysis_context(self,\r\n+                                    data: Dict[str, float]) -> Dict[str, Any]:\r\n+        \"\"\"Get relevant context for analysis\"\"\"\r\n+        query = self._generate_context_query(data)\r\n+        context = await self.memory_manager.get_relevant_context(query)\r\n \r\n-        Args:\r\n-            monthly_data: Dictionary of monthly consumption data\r\n-                        Format: {'YYYY-MM': consumption_value}\r\n+        return {\r\n+            'historical_patterns': self._extract_patterns(context),\r\n+            'known_entities': await self._get_relevant_entities(data),\r\n+            'previous_recommendations': self._extract_recommendations(context)\r\n+        }\r\n \r\n-        Returns:\r\n-            Dictionary containing analysis results and recommendations\r\n-        \"\"\"\r\n-        try:\r\n-            # Validate input data\r\n-            if not self._validate_data(monthly_data):\r\n-                raise ValueError(\"Invalid data format\")\r\n+    async def _store_analysis_results(self,\r\n+                                      results: AnalysisResult):\r\n+        \"\"\"Store analysis results in memory\"\"\"\r\n+        # Store overall results\r\n+        await self.memory_manager.store_memory(\r\n+            content=results.dict(),\r\n+            source='analysis',\r\n+            tags=['analysis_result']\r\n+        )\r\n \r\n-            # Create tasks\r\n-            analysis_task = TaskDefinitions.create_analysis_task(\r\n-                monthly_data,\r\n-                self.data_analyst\r\n+        # Store patterns separately\r\n+        if patterns := results.get('patterns'):\r\n+            await self.memory_manager.store_memory(\r\n+                content={'patterns': patterns},\r\n+                source='pattern_analysis',\r\n+                tags=['pattern', 'insight']\r\n             )\r\n \r\n-            # Create crew for initial analysis\r\n-            analysis_crew = Crew(\r\n-                agents=[self.data_analyst],\r\n-                tasks=[analysis_task],\r\n-                verbose=PROCESS_CONFIG[\"verbose\"],\r\n-                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n-                process=Process.sequential\r\n-            )\r\n+        # Store entities\r\n+        if entities := results.get('entities'):\r\n+            for entity in entities:\r\n+                await self.memory_manager.entity.store_entity(\r\n+                    entity['id'],\r\n+                    entity['attributes']\r\n+                )\r\n \r\n-            # Execute analysis\r\n-            logger.info(\"Starting energy consumption analysis\")\r\n-            analysis_result = analysis_crew.kickoff()\r\n+    def _generate_context_query(self, data: Dict[str, float]) -> str:\r\n+        \"\"\"Generate context query from current data\"\"\"\r\n+        return f\"\"\"\r\n+        Find relevant information for energy analysis with characteristics:\r\n+        - Date range: {min(data.keys())} to {max(data.keys())}\r\n\\ No newline at end of file\n+        - Consumption range: {min(data.values()):.2f} to {max(data.values()):.2f} kWh\r\n+        \"\"\"\r\n \r\n-            # Parse analysis result\r\n-            try:\r\n-                analysis_data = json.loads(analysis_result.raw)\r\n-            except json.JSONDecodeError:\r\n-                logger.warning(\"Failed to parse analysis result as JSON\")\r\n-                analysis_data = {\"raw_analysis\": analysis_result.raw}\r\n+    async def _get_relevant_entities(self,\r\n+                                     data: Dict[str, float]) -> Dict[str, Any]:\r\n+        \"\"\"Get relevant entities for the analysis\"\"\"\r\n+        entities = {}\r\n \r\n-            # Create recommendation task\r\n-            recommendation_task = TaskDefinitions.create_recommendation_task(\r\n-                analysis_data,\r\n-                self.energy_advisor\r\n-            )\r\n+        # Get location entity if it exists\r\n+        if location := await self.memory_manager.entity.retrieve_entity('location'):\r\n+            entities['location'] = location\r\n \r\n-            # Create crew for recommendations\r\n-            recommendation_crew = Crew(\r\n-                agents=[self.energy_advisor],\r\n-                tasks=[recommendation_task],\r\n-                verbose=PROCESS_CONFIG[\"verbose\"],\r\n-                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n-                process=Process.sequential\r\n-            )\r\n+        # Get relevant device entities\r\n+        device_query = \"Find devices affecting energy consumption\"\r\n+        device_results = await self.memory_manager.entity.find_similar_entities(\r\n+            device_query\r\n+        )\r\n+        if device_results:\r\n+            entities['devices'] = device_results\r\n \r\n-            # Generate recommendations\r\n-            logger.info(\"Generating recommendations\")\r\n-            recommendation_result = recommendation_crew.kickoff()\r\n-\r\n-            # Parse recommendation result\r\n-            try:\r\n-                recommendation_data = json.loads(recommendation_result.raw)\r\n-            except json.JSONDecodeError:\r\n-                logger.warning(\"Failed to parse recommendations as JSON\")\r\n-                recommendation_data = {\"raw_recommendations\": recommendation_result.raw}\r\n-\r\n-            # Combine results\r\n-            return {\r\n-                \"analysis\": analysis_data,\r\n-                \"recommendations\": recommendation_data,\r\n-                \"timestamp\": datetime.now().isoformat()\r\n-            }\r\n-\r\n-        except Exception as e:\r\n-            logger.error(f\"Analysis error: {str(e)}\")\r\n-            raise\r\n-\r\n-    def _validate_data(self, data: Dict[str, float]) -> bool:\r\n-        \"\"\"Validate input data format.\"\"\"\r\n-        if not data or not isinstance(data, dict):\r\n-            return False\r\n-\r\n-        try:\r\n-            for month, value in data.items():\r\n-                # Validate date format (YYYY-MM)\r\n-                if not (isinstance(month, str) and len(month.split('-')) == 2):\r\n-                    return False\r\n-                # Validate consumption value\r\n-                if not (isinstance(value, (int, float)) and value >= 0):\r\n-                    return False\r\n-            return True\r\n-        except Exception:\r\n-            return False\n+        return entities\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731053454284,
            "name": "Commit-0",
            "content": "# src/core/analyzer.py\r\n\r\nfrom crewai import Crew, Process, LLM\r\nfrom typing import Dict, Any\r\nimport logging\r\nfrom datetime import datetime\r\n\r\nfrom config.config import LLM_CONFIG, PROCESS_CONFIG\r\nfrom src.agents.data_analyst import DataAnalystAgent\r\nfrom src.agents.energy_advisor import EnergyAdvisorAgent\r\nfrom src.core.tasks import TaskDefinitions\r\n\r\n\r\nimport json\r\n\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass EnergyAnalyzer:\r\n    \"\"\"\r\n    Core class for energy consumption analysis using CrewAI.\r\n    Version 1: Implementation with two agents and sequential processing.\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        \"\"\"Initialize the EnergyAnalyzer with default configuration.\"\"\"\r\n        try:\r\n            self.llm = LLM(\r\n                model=LLM_CONFIG[\"model\"],\r\n                base_url=LLM_CONFIG[\"base_url\"],\r\n                api_key=LLM_CONFIG[\"api_key\"],\r\n                temperature=LLM_CONFIG[\"temperature\"]\r\n            )\r\n            logger.info(\"LLM initialized successfully\")\r\n\r\n            # Initialize agents\r\n            self.data_analyst = DataAnalystAgent.create_agent(self.llm)\r\n            self.energy_advisor = EnergyAdvisorAgent.create_agent(self.llm)\r\n            logger.info(\"Agents initialized successfully\")\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Initialization error: {str(e)}\")\r\n            raise\r\n\r\n    def analyze(self, monthly_data: Dict[str, float]) -> Dict[str, Any]:\r\n        \"\"\"\r\n        Analyze energy consumption data and provide recommendations.\r\n\r\n        Args:\r\n            monthly_data: Dictionary of monthly consumption data\r\n                        Format: {'YYYY-MM': consumption_value}\r\n\r\n        Returns:\r\n            Dictionary containing analysis results and recommendations\r\n        \"\"\"\r\n        try:\r\n            # Validate input data\r\n            if not self._validate_data(monthly_data):\r\n                raise ValueError(\"Invalid data format\")\r\n\r\n            # Create tasks\r\n            analysis_task = TaskDefinitions.create_analysis_task(\r\n                monthly_data,\r\n                self.data_analyst\r\n            )\r\n\r\n            # Create crew for initial analysis\r\n            analysis_crew = Crew(\r\n                agents=[self.data_analyst],\r\n                tasks=[analysis_task],\r\n                verbose=PROCESS_CONFIG[\"verbose\"],\r\n                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n                process=Process.sequential\r\n            )\r\n\r\n            # Execute analysis\r\n            logger.info(\"Starting energy consumption analysis\")\r\n            analysis_result = analysis_crew.kickoff()\r\n\r\n            # Parse analysis result\r\n            try:\r\n                analysis_data = json.loads(analysis_result.raw)\r\n            except json.JSONDecodeError:\r\n                logger.warning(\"Failed to parse analysis result as JSON\")\r\n                analysis_data = {\"raw_analysis\": analysis_result.raw}\r\n\r\n            # Create recommendation task\r\n            recommendation_task = TaskDefinitions.create_recommendation_task(\r\n                analysis_data,\r\n                self.energy_advisor\r\n            )\r\n\r\n            # Create crew for recommendations\r\n            recommendation_crew = Crew(\r\n                agents=[self.energy_advisor],\r\n                tasks=[recommendation_task],\r\n                verbose=PROCESS_CONFIG[\"verbose\"],\r\n                max_rpm=PROCESS_CONFIG[\"max_rpm\"],\r\n                process=Process.sequential\r\n            )\r\n\r\n            # Generate recommendations\r\n            logger.info(\"Generating recommendations\")\r\n            recommendation_result = recommendation_crew.kickoff()\r\n\r\n            # Parse recommendation result\r\n            try:\r\n                recommendation_data = json.loads(recommendation_result.raw)\r\n            except json.JSONDecodeError:\r\n                logger.warning(\"Failed to parse recommendations as JSON\")\r\n                recommendation_data = {\"raw_recommendations\": recommendation_result.raw}\r\n\r\n            # Combine results\r\n            return {\r\n                \"analysis\": analysis_data,\r\n                \"recommendations\": recommendation_data,\r\n                \"timestamp\": datetime.now().isoformat()\r\n            }\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Analysis error: {str(e)}\")\r\n            raise\r\n\r\n    def _validate_data(self, data: Dict[str, float]) -> bool:\r\n        \"\"\"Validate input data format.\"\"\"\r\n        if not data or not isinstance(data, dict):\r\n            return False\r\n\r\n        try:\r\n            for month, value in data.items():\r\n                # Validate date format (YYYY-MM)\r\n                if not (isinstance(month, str) and len(month.split('-')) == 2):\r\n                    return False\r\n                # Validate consumption value\r\n                if not (isinstance(value, (int, float)) and value >= 0):\r\n                    return False\r\n            return True\r\n        except Exception:\r\n            return False"
        }
    ]
}